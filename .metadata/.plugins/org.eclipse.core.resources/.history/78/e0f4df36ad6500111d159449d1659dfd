
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;



public class Main
{
	public ArrayList<block> blist= new ArrayList<block>();
	
	

	public void prob437()
	{
	//	Scanner sc=new Scanner(System.in);
	Scanner sc=null;
		try {
			sc = new Scanner(new File("input.txt"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int testcase=0,count;
		int i=0;
		int x,y,z;
		block bk=null;
		
		while(sc.hasNext())
		{
			testcase++;
		
		//	   Sieve(20000000);
			count=sc.nextInt();
			//count=Integer.parseInt(sc.next());
		
			if(count==0)
				break;
			
		     i=0;
			 bk=null;
			 blist.clear();
			while(i<count)
			{
				x=sc.nextInt();
		     	y=sc.nextInt();
				z=sc.nextInt();
				
				bk=new block(x,y,z);
				blist.add(bk);
				
				bk=new block(x,z,y);
				blist.add(bk);
				
				bk=new block(y,x,z);
				blist.add(bk);
				
				bk=new block(y,z,x);
				blist.add(bk);
				
				bk=new block(z,x,y);
				blist.add(bk);
				
				bk=new block(z,y,x);
				blist.add(bk);
				
				i++;
		     
			}
			
			 DP(testcase);
		}
	   

	}
	
	public void SortList()
	{
		Collections.sort(blist, new Comparator<block>(){
		     public int compare(block b1,block b2)
		     {
		    	
		    /*	if((b1.x>b2.x && b1.y>b2.y) || (b1.x==b2.x && b1.y>b2.y))
		    		return 0;
		    	else
		    		return 1;*/
		    	 
		    	 return( b1.x>b2.x && b1.y>b2.y )?1:0;
		     }
		     
		}
		
		);
		
	//	for(int i=0;i<blist.size();i++)
	//		System.out.println(blist.get(i).x+" "+blist.get(i).y+ " "+blist.get(i).z);
		
	}
	
	public void DP(int testcase)
	{
		SortList();
		int [] sum=new int[blist.size()];

		sum[0]=blist.get(0).z;
	    int	max=sum[0];
	
int i=0,j=0, maxj=0;

		for(i=1;i<blist.size();i++)
		{
			
	/*		if(i>0)
			{
			pos[i][0]=pos[i-1][0];
			pos[i][1]=pos[i-1][0];
			}
			*/
			maxj=0;
			for(j=0;j<i;j++)
			{
				//if((blist.get(i).x<blist.get(j).x && blist.get(i).y<blist.get(j).y)|| (blist.get(i).x<blist.get(j).y && blist.get(i).y<blist.get(j).x))
				if(Math.max(blist.get(i).x,blist.get(i).y)<Math.max(blist.get(j).x,blist.get(j).y) && Math.min(blist.get(i).x,blist.get(i).y)<Math.min(blist.get(j).x,blist.get(j).y))	
			//	if(blist.get(i).x*blist.get(i).y<blist.get(j).x*blist.get(j).y)
			//		if(((blist.get(i).x > blist.get(j).x) && (blist.get(i).y > blist.get(j).y)) || ((blist.get(i).x > blist.get(j).y) && (blist.get(i).y >blist.get(j).x)))
				{
					if(sum[j]>maxj)
					{
						maxj=sum[j];
						//pos[i][0]=blist.get(i).x;
						//pos[i][1]=blist.get(i).y;
					}
				}
			}
			
			sum[i]=blist.get(i).z+maxj;
			
			if(sum[i]>max)
				max=sum[i];
		}
		//System.out.println();
		System.out.println("Case "+testcase+": maximum height = "+sum[sum.length-1]);
	             //  cout << "Case "<<test++<<": maximum height = "<<mx<<endl;
	}
	
	
	public static void main(String args[])
	{
         Main ob=new Main();
         ob.prob437();
      //   ob.SortList();
        
	}
	class block
	{
	public	int x;
	public	int y;
	public	int z;
	
		
		public block(int x,int y,int z)
		{
		  this.x=x;
		  this.y=y;
		  this.z=z;
		
		}
		
	}
	

}


